pipeline {
  agent { label 'maven' }
  environment {
    version = "${VERSION}"
    devTag = "${version}-${BUILD_NUMBER}"
    TOKEN = readFile("/run/secrets/kubernetes.io/serviceaccount/token").trim()
  }
  options {
    timeout(time: 5, unit: 'MINUTES')
  }

  stages {
    stage('Variable Check') {
      steps {
        echo "version: ${version}"
        echo "devTag: ${devTag}"
        sh "printenv"
        sh "oc version"
      }
    }
    stage('Build Container Image') {
      steps {
        echo "Building a container image ${devTag}."
        script {
          // OpenShift Jenkins Pipeline (DSL) Plugin
          openshift.withCluster() {
            openshift.withProject() {
              // Create BuildConfig if it doen't exist or start build if exists
              if(!openshift.selector("bc", "${APP_NAME}").exists()) {
                // The selector returned from newBuild will select all objects created by the operation
                def nb = openshift.newBuild("${GIT_SOURCE_URL}", "--name=${APP_NAME}", "--image-stream=${APP_IMAGE}")
              } else {
                def nb = openshift.selector("bc", "${APP_NAME}")
                nb.startBuild()
              }
              def nb = openshift.selector("bc", "${APP_NAME}")

              // Print out information about the objects created by newBuild
              echo "newBuild created: ${nb.count()} objects: ${nb.names()}"

              // Filter non-BuildConfig objects and create selector which will find builds related to the BuildConfig
              def buildSelector = nb.narrow("bc").related("builds")

              // Throw exception after 5 minutes
              timeout(5) {
                buildSelector.untilEach(1) {
                  return (it.object().status.phase == "Complete")
                }
              }
              echo "Builds have been completed: ${buildSelector.names()}"

              // Print a list of the builds which have been created
              echo "Build logs for ${buildSelector.names()}:"

              // Find the bc again, and ask for its logs
              def result = nb.narrow("bc").logs()

              // Each high-level operation exposes stout/stderr/status of oc actions that composed
              echo "Result of logs operation:"
              echo "  status: ${result.status}"
              echo "  stderr: ${result.err}"
              echo "  number of actions to fulfill: ${result.actions.size()}"
              echo "  first action executed: ${result.actions[0].cmd}"

              // Tag the ${APP_NAME}:latest image as ${APP_NAME}:${devTag}
              openshift.tag("${APP_NAME}:latest", "${APP_NAME}:${devTag}")
            }
          }
        }
      }
    }
  }
}
